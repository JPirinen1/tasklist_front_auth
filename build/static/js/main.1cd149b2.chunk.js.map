{"version":3,"sources":["authConfig.js","ui.jsx","tasklist.js","App.jsx","index.js"],"names":["msalConfig","auth","clientId","authority","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","NavigationBar","instance","useMsal","DropdownButton","variant","className","drop","title","Dropdown","Item","as","onClick","logoutPopup","mainWindowRedirectUri","logoutRedirect","loginPopup","catch","log","loginRedirect","PageLayout","props","Navbar","bg","href","id","children","target","IdTokenClaims","idTokenClaims","aud","iss","oid","preferred_username","Tasklist","useState","taskText","setTaskText","modText","setModText","tasks","setTasks","useEffect","getTasks","fetch","then","response","json","data","onSubmit","event","preventDefault","task","text","checked","modify","requestOptions","method","headers","body","JSON","stringify","concat","type","value","onChange","e","map","item","i","newArray","handleModify","filter","handleDelete","startModify","handleCheck","IdTokenContent","accounts","name","MainContent","App","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cd149b2.chunk.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LogLevel } from \"@azure/msal-browser\";\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation. \r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \r\n */\r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: \"0c7d7460-f534-4e6b-9720-ac21afdb2363\", // This is the ONLY mandatory field that you need to supply.\r\n        authority: \"https://login.microsoftonline.com/9ead1224-fba4-4969-9b02-e399a89c06c6\", // Defaults to \"https://login.microsoftonline.com/common\"\r\n        redirectUri: \"/\", // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n        postLogoutRedirectUri: \"/\", // Indicates the page to navigate after logout.\r\n        navigateToLoginRequestUrl: false, // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n    },\r\n    cache: {\r\n        cacheLocation: \"sessionStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    },\r\n    system: {\r\n        loggerOptions: {\r\n            loggerCallback: (level, message, containsPii) => {\r\n                if (containsPii) {\r\n                    return;\r\n                }\r\n                switch (level) {\r\n                    case LogLevel.Error:\r\n                        console.error(message);\r\n                        return;\r\n                    case LogLevel.Info:\r\n                        console.info(message);\r\n                        return;\r\n                    case LogLevel.Verbose:\r\n                        console.debug(message);\r\n                        return;\r\n                    case LogLevel.Warning:\r\n                        console.warn(message);\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit: \r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\nexport const loginRequest = {\r\n    scopes: []\r\n};\r\n\r\n/**\r\n * An optional silentRequest object can be used to achieve silent SSO\r\n * between applications by providing a \"login_hint\" property.\r\n */\r\nexport const silentRequest = {\r\n    scopes: [\"openid\", \"profile\"],\r\n    loginHint: \"example@domain.net\"\r\n};","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\n\r\nimport { Navbar, Button, Dropdown, DropdownButton} from \"react-bootstrap\";\r\n\r\nimport { loginRequest } from \"./authConfig\";\r\n\r\nconst NavigationBar = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { instance } = useMsal();\r\n\r\n    const handleLogin = () => {\r\n        instance.loginPopup(loginRequest)\r\n            .catch((error) => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AuthenticatedTemplate>\r\n                <DropdownButton variant=\"warning\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\r\n                    <Dropdown.Item as=\"button\" onClick={() => instance.logoutPopup({ postLogoutRedirectUri: \"/\", mainWindowRedirectUri: \"/\"})}>Sign out using Popup</Dropdown.Item>\r\n                    <Dropdown.Item as=\"button\" onClick={() => instance.logoutRedirect({postLogoutRedirectUri: \"/\"})}>Sign out using Redirect</Dropdown.Item>\r\n                </DropdownButton>\r\n            </AuthenticatedTemplate>\r\n            <UnauthenticatedTemplate>\r\n                <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\r\n                    <Dropdown.Item as=\"button\" onClick={handleLogin}>Sign in using Popup</Dropdown.Item>\r\n                    <Dropdown.Item as=\"button\" onClick={() => instance.loginRedirect(loginRequest)}>Sign in using Redirect</Dropdown.Item>\r\n                </DropdownButton>\r\n            </UnauthenticatedTemplate>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const PageLayout = (props) => {\r\n    return (\r\n        <>\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">Microsoft identity platform</a>\r\n                <NavigationBar />\r\n            </Navbar>\r\n            <br />\r\n            <h5><center id=\"title\">Welcome to the Microsoft Authentication Library For React Tutorial</center></h5>\r\n            <br />\r\n            {props.children}\r\n            <br />\r\n            <AuthenticatedTemplate>\r\n                <footer>\r\n                    <center>How did we do?\r\n                        <a href=\"https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR73pcsbpbxNJuZCMKN0lURpUMlRHSkc5U1NLUkxFNEtVN0dEOTFNQkdTWiQlQCN0PWcu\" target=\"_blank\"> Share your experience!</a>\r\n                    </center>\r\n                </footer>\r\n            </AuthenticatedTemplate>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const IdTokenClaims = (props) => {\r\n    return (\r\n        <div id=\"token-div\">\r\n            <p><strong>Audience: </strong> {props.idTokenClaims.aud}</p>\r\n            <p><strong>Issuer: </strong> {props.idTokenClaims.iss}</p>\r\n            <p><strong>OID: </strong> {props.idTokenClaims.oid}</p>\r\n            <p><strong>UPN: </strong> {props.idTokenClaims.preferred_username}</p>\r\n        </div>\r\n    );\r\n}","import { useState, useEffect } from \"react\";\r\n\r\n\r\n\r\nfunction Tasklist() {\r\n  const [taskText, setTaskText] = useState(\"\");\r\n  const [modText, setModText] = useState(\"\");\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getTasks()\r\n  }, []);\r\n  \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const task = {\r\n      text: taskText,\r\n      checked: false,\r\n      modify: false\r\n    }\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(task)\r\n    };\r\n    fetch('https://tasklistfunction111.azurewebsites.net/api/httptrigger2', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data => setTasks(tasks.concat(data)));\r\n\r\n    setTaskText(\"\")\r\n  }\r\n\r\n  const handleDelete = ( item) => {\r\n    const newArray = tasks.filter((task) => task.text !== item.text)\r\n    setTasks(newArray)\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ id: item.id })\r\n    };\r\n    fetch('https://tasklistfunction111.azurewebsites.net/api/httptrigger4', requestOptions)\r\n\r\n    \r\n    \r\n  }\r\n  const startModify = (item) => {\r\n    const newArray = tasks.map((task) => {\r\n      if(task.text === item.text) {\r\n        task.modify = true\r\n        return task\r\n      }\r\n      else {\r\n        return task\r\n      }\r\n    })\r\n    setModText(item.text)\r\n    setTasks(newArray)\r\n  }\r\n  const handleModify = (item) => {\r\n    const newArray = tasks.map((task) => {\r\n      if(task.modify) {\r\n        task.text = modText\r\n        task.modify = false\r\n        return task\r\n      }\r\n      else {\r\n        return task\r\n      }\r\n    })\r\n\r\n    item.text = modText\r\n    item.modify = false\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(item)\r\n    };\r\n    fetch('https://tasklistfunction111.azurewebsites.net/api/httptrigger5', requestOptions)\r\n\r\n    setTasks(newArray)\r\n  }\r\n  const handleCheck = (item) => {\r\n    const newArray = tasks.map((task) => {\r\n      if(task.text === item.text) {\r\n        task.checked = !task.checked\r\n        return task\r\n      }\r\n      else {\r\n        return task\r\n      }\r\n    })\r\n\r\n\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(item)\r\n    };\r\n    fetch('https://tasklistfunction111.azurewebsites.net/api/httptrigger5', requestOptions)\r\n\r\n    setTasks(newArray)\r\n    console.log(newArray)\r\n  }\r\n\r\n  const getTasks = () => {\r\n    fetch('https://tasklistfunction111.azurewebsites.net/api/httptrigger3')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log(data)\r\n          setTasks(data)\r\n        });\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>TO-DO_LIST</h1>\r\n\r\n\r\n      <form onSubmit={handleSubmit}>\r\n      <label>Enter new task:\r\n        <input \r\n          type=\"text\" \r\n          value={taskText}\r\n          onChange={(e) => setTaskText(e.target.value)}\r\n        />\r\n      </label>\r\n      \r\n      <input type=\"submit\" />\r\n      </form>\r\n\r\n\r\n      <div>\r\n        <ol>\r\n          {tasks.map((item, i) => \r\n            <li key={i}>\r\n              {item.modify ? \r\n                <form onSubmit={() => handleModify(item)}>\r\n                  <input \r\n                    type=\"text\"\r\n                    value={modText}\r\n                    onChange={(e) => setModText(e.target.value)}>\r\n                    \r\n                  </input>\r\n                  <input type=\"submit\" />\r\n                </form>\r\n                 :\r\n                <p>{item.text}</p>}\r\n              \r\n              <button onClick={() => handleDelete(item)}>Delete</button>\r\n              <button onClick={() => startModify(item)}>Modify</button>\r\n              <label>\r\n              <input \r\n                type=\"checkbox\"\r\n                value={item.checked}\r\n                checked={item.checked}\r\n                onChange={() => handleCheck(item)} />\r\n                Done\r\n              </label>\r\n            </li>)}\r\n        </ol>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tasklist;\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\n\r\nimport { PageLayout, IdTokenClaims } from \"./ui.jsx\";\r\nimport Tasklist from \"./tasklist.js\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./styles/App.css\";\r\n\r\nconst IdTokenContent = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { accounts } = useMsal();\r\n    const [idTokenClaims, setIdTokenClaims] = useState(null);\r\n\r\n    function GetIdTokenClaims() {\r\n        setIdTokenClaims(accounts[0].idTokenClaims)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\r\n            {idTokenClaims ?\r\n                <IdTokenClaims idTokenClaims={idTokenClaims} />\r\n                :\r\n                <Tasklist/>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n/**\r\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \r\n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \r\n * only render their children if a user is authenticated or unauthenticated, respectively. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nconst MainContent = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthenticatedTemplate>\r\n                <IdTokenContent />\r\n            </AuthenticatedTemplate>\r\n\r\n            <UnauthenticatedTemplate>\r\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\r\n            </UnauthenticatedTemplate>\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * msal-react is built on the React context API and all parts of your app that require authentication must be \r\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \r\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \r\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport default function App({msalInstance}) {\r\n    return (\r\n        <MsalProvider instance={msalInstance}>\r\n            <PageLayout>\r\n                <MainContent />\r\n            </PageLayout>\r\n        </MsalProvider>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nimport App from \"./App.jsx\";\r\nimport { msalConfig } from \"./authConfig\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/index.css\";\r\n\r\n/**\r\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \r\n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport const msalInstance = new PublicClientApplication(msalConfig);\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App msalInstance={msalInstance}/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}